package mau.edition

import io.circe.*
import io.circe.syntax.*
import mau.exec.RuleExecutor
import requests.RequestAuth

class RuleGenerator(host: String, token: String, exec: RuleExecutor):
  case class GenReq(description: String) derives Codec
  case class GenResp(code: String, rephrased_rule: String) derives Codec 
  case class GenErr(error: String) derives Codec 

  def generate(prompt: String): Generation =
    val response = requests.post(
      s"https://$host/prod/generate",
      data = Printer.noSpaces.print(GenReq(prompt).asJson),
      auth = RequestAuth.Bearer(token),
      headers = Seq("Content-Type" -> "application/json"),
      check = false,
      readTimeout = 30000,      // actual timeout of the API, since we use exponential retries when the LLM service is overloaded
      connectTimeout = 30000    // actual timeout of the API, since we use exponential retries when the LLM service is overloaded
    )
    response.statusCode match
      case 200 =>
        parser.decode[GenResp](response.text()) match
          case Left(value) => Generation.Failure(value.toString)
          case Right(value) =>
            val code =
              s"""|// This rule is generated by an LLM
                  |// ${value.rephrased_rule.stripSuffix("\n")}
                  |${value.code.stripSuffix("\n")}
                  |""".stripMargin
            Generation.Success(exec.compile(code).toReport, value.rephrased_rule)
      case 400 =>
        parser.decode[GenErr](response.text()) match
          case Left(_)    => Generation.Failure(response.text())
          case Right(err) => Generation.Failure(err.error)
      case 500  =>
        Generation.Failure("Internal server error; please try again later or use another tab to create your rule.")
      case _  =>
        Generation.Failure(response.text())
